name: CI
on:
  - push
  - pull_request_target

env:
  NODE_VERSION: 16
  DOCKER_REGISTRY: quay.io
  ORGANIZATION: detective.solutions

jobs:
  Check-Affected-Files:
    runs-on: ubuntu-latest
    # Run only on manual push events
    if: github.event_name == 'push' && github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Install npm dependencies (without scripts)
        run: npm ci --ignore-scripts --no-audit --no-fund

      - name: Run npm scripts # Run scripts here to prevent access to NODE_AUTH_TOKEN
        run: npm rebuild && npm run prepare --if-present

      - name: Lint affected files
        run: npx nx affected --target=lint --parallel=3

      - name: Test affected files
        run: npx nx affected --target=test --parallel=3 --ci --code-coverage

  Detect-Changed-Apps:
    runs-on: ubuntu-latest
    needs: [Check-Affected-Files]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changed apps
        uses: detective-solutions/nx-check-changes@v2.0.0
        id: nx-changes

    outputs:
      skip-build: ${{steps.nx-changes.outputs.not-affected}}
      changed-apps: ${{steps.nx-changes.outputs.changed-apps}}

  Build-Affected-Apps:
    runs-on: ubuntu-latest
    if: needs.Detect-Changed-Apps.outputs.skip-build == 'false'
    needs: [Check-Affected-Files, Detect-Changed-Apps]
    strategy:
      fail-fast: false
      matrix:
        app: ${{fromJSON(needs.Detect-Changed-Apps.outputs.changed-apps)}}
    env:
      DOCKERFILE_PATH: ./apps/${{matrix.app}}/docker/Dockerfile

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json

      - name: Install npm dependencies (without scripts)
        run: npm ci --ignore-scripts --no-audit --no-fund

      - name: Run npm scripts # Run scripts here to prevent access to NODE_AUTH_TOKEN
        run: npm rebuild && npm run prepare --if-present

      - name: Build ${{matrix.app}}
        run: npx nx build ${{matrix.app}} --prod && npm run transloco:optimize

      - name: Create docker image metadata (name & tags based on branch name)
        id: image-metadata
        env:
          CURRENT_BRANCH: ${{github.ref_name}}
        run: |
          IMAGE_NAME=${{env.DOCKER_REGISTRY}}/${{env.ORGANIZATION}}/${{matrix.app}}
          APP_VERSION=$(node --print "require('./package.json').version")
          if [[ $CURRENT_BRANCH == 'main' ]]; then
            BASE_TAG=${IMAGE_NAME}:${APP_VERSION}
            TARGET_TAGS="--tag=${BASE_TAG}"
          elif [[ $CURRENT_BRANCH == 'development' ]]; then
            BASE_TAG=${IMAGE_NAME}:${APP_VERSION}
            TARGET_TAGS="--tag=${BASE_TAG} --tag=${IMAGE_NAME}:development"
          else
            # Sanitize branch name by replacing slashes with hyphens
            SANITIZED_BRANCH_NAME=${CURRENT_BRANCH//\//-}
            BASE_TAG=${IMAGE_NAME}:${APP_VERSION}-${SANITIZED_BRANCH_NAME}
            TARGET_TAGS="--tag=${BASE_TAG}"
          fi
          echo "::set-output name=image-name::${IMAGE_NAME}"
          echo "::set-output name=base-tag::${BASE_TAG}"
          echo "::set-output name=target-tags::${TARGET_TAGS}"

      - name: Build fat docker image
        run: docker build -f ${{env.DOCKERFILE_PATH}} -t ${{steps.image-metadata.outputs.base-tag}} .

      - name: Build & tag optimized docker images
        run: |
          curl -sL https://raw.githubusercontent.com/docker-slim/docker-slim/master/scripts/install-dockerslim.sh | sudo -E bash -
          docker-slim build \
            --http-probe-off \
            --include-path /app \
            --include-path /usr/share \
            --include-path /etc/nginx \
            --target ${{steps.image-metadata.outputs.base-tag}} \
            ${{steps.image-metadata.outputs.target-tags}}

      - name: Login to quay.io
        uses: docker/login-action@v2
        with:
          registry: ${{env.DOCKER_REGISTRY}}
          username: ${{secrets.DOCKER_REGISTRY_USER}}
          password: ${{secrets.DOCKER_REGISTRY_TOKEN}}

      - name: Push all docker available docker tags
        run: docker push -a ${{steps.image-metadata.outputs.image-name}}

  Dependabot-Checks:
    runs-on: ubuntu-latest
    # Only run for dependabot on a pull request event
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # PRs with event_name 'pull_request_target' always run in the PR target branch
      - name: Switch branch on PR
        if: github.event_name == 'pull_request_target'
        run: git checkout ${{github.event.pull_request.head.sha}}

      - name: Setup nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json

      - name: Install npm dependencies (without scripts)
        run: npm ci --ignore-scripts --no-audit --no-fund

      - name: Run npm scripts # Run scripts here to prevent access to NODE_AUTH_TOKEN
        run: npm rebuild && npm run prepare --if-present

      - name: Lint all apps
        run: npx nx run-many --all --target=lint --parallel=3

      - name: Test all apps
        run: npx nx run-many --all --target=test --parallel=3 --ci
